/*This file is built from source files. Please do not edit this file directly*/


/* BEGINNING OF console.js */
// Avoid `console` errors in browsers that lack a console.
if(!(window.console && console.log)) {
    (function() {
        var noop = function() {};
        var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'markTimeline', 'table', 'time', 'timeEnd', 'timeStamp', 'trace', 'warn'];
        var length = methods.length;
        var console = window.console = {};
        while (length--) {
            console[methods[length]] = noop;
        }
    }());
};/* END OF console.js */

/* BEGINNING OF find-an-adventure.js */
/*globals alert Modernizr window navigator document setTimeout clearTimeout*/
(function($){
    "use strict";
    if(window.location.pathname.toString().indexOf("find-an-adventure.html") === -1) return;
    var find_init = function(){
        var close_modal_timer,
            $last_modal,
            delete_any_modal_backdrops = function(){
                $(".modal-backdrop").remove();
            };
        $(".resetFinder").click(function(event){
            $(".modal .active").removeClass("active");
            $("#no-results").hide();
            $("#results").hide();
        }),
        
        $(".modal").on("click", "a", function(event){
            var $this = $(this),
                $list_item = $this.closest("li"),
                $modal = $this.closest(".modal"),
                modal_id = $modal.attr("id"),
                $results = $("#results"),
                $no_results = $("#no-results"),
                $results_search = $results.find("li"),
                $modals = $(".modal"),
                $warning_one_two_days = $("#warning-1-2-days");
            $last_modal = $modal;
            if(modal_id === "where" || modal_id === "time") {
                $list_item.toggleClass("active").siblings().removeClass("active");
            } else if($modal.is("#see")) {
                $list_item.toggleClass("active");
            }
            $modal.modal('hide');

            if(close_modal_timer) {
                clearTimeout(close_modal_timer);
            }
            close_modal_timer = setTimeout(delete_any_modal_backdrops, 250);
            
            $results_search.show();
            $warning_one_two_days.hide();
            $modals.each(function(index){
                var $modal = $(this),
                    modal_id = $modal.attr("id"),
                    $active_selections = $modal.find(".active");

                $active_selections.each(function(){
                    var $active_selection = $(this),
                        active_selection_id = $active_selection.attr("id"),
                        selector = "." + active_selection_id;
                    $results_search.not(selector).hide();
                    $results_search = $results_search.filter(selector);
                    if(active_selection_id === "time-1-2-days") {
                        $warning_one_two_days.show();
                    }
                });
            });
            
            if($results_search.length > 0) {
                $results.show();
                $no_results.hide();
            } else {
                $results.hide();
                $no_results.show();
            }
            event.preventDefault();
        });
    };

    if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
        document.addEventListener("deviceready", find_init, false);
    } else {
        $(document).ready(find_init);
    }
}(jQuery));
/* END OF find-an-adventure.js */

/* BEGINNING OF helper.js */
/**
 * MBP - Mobile boilerplate helper functions
 */
(function(document) {

    window.MBP = window.MBP || {};

    /**
     * Fix for iPhone viewport scale bug
     * http://www.blog.highub.com/mobile-2/a-fix-for-iphone-viewport-scale-bug/
     */

    MBP.viewportmeta = document.querySelector && document.querySelector('meta[name="viewport"]');
    MBP.ua = navigator.userAgent;

    MBP.scaleFix = function() {
        if (MBP.viewportmeta && /iPhone|iPad|iPod/.test(MBP.ua) && !/Opera Mini/.test(MBP.ua)) {
            MBP.viewportmeta.content = 'width=device-width, minimum-scale=1.0, maximum-scale=1.0';
            document.addEventListener('gesturestart', MBP.gestureStart, false);
        }
    };

    MBP.gestureStart = function() {
        MBP.viewportmeta.content = 'width=device-width, minimum-scale=0.25, maximum-scale=1.6';
    };

    /**
     * Normalized hide address bar for iOS & Android
     * (c) Scott Jehl, scottjehl.com
     * MIT License
     */

    // If we split this up into two functions we can reuse
    // this function if we aren't doing full page reloads.

    // If we cache this we don't need to re-calibrate everytime we call
    // the hide url bar
    MBP.BODY_SCROLL_TOP = false;

    // So we don't redefine this function everytime we
    // we call hideUrlBar
    MBP.getScrollTop = function() {
        var win = window;
        var doc = document;

        return win.pageYOffset || doc.compatMode === 'CSS1Compat' && doc.documentElement.scrollTop || doc.body.scrollTop || 0;
    };

    // It should be up to the mobile
    MBP.hideUrlBar = function() {
        var win = window;

        // if there is a hash, or MBP.BODY_SCROLL_TOP hasn't been set yet, wait till that happens
        if (!location.hash && MBP.BODY_SCROLL_TOP !== false) {
            win.scrollTo( 0, MBP.BODY_SCROLL_TOP === 1 ? 0 : 1 );
        }
    };

    MBP.hideUrlBarOnLoad = function() {
        var win = window;
        var doc = win.document;
        var bodycheck;

        // If there's a hash, or addEventListener is undefined, stop here
        if ( !location.hash && win.addEventListener ) {

            // scroll to 1
            window.scrollTo( 0, 1 );
            MBP.BODY_SCROLL_TOP = 1;

            // reset to 0 on bodyready, if needed
            bodycheck = setInterval(function() {
                if ( doc.body ) {
                    clearInterval( bodycheck );
                    MBP.BODY_SCROLL_TOP = MBP.getScrollTop();
                    MBP.hideUrlBar();
                }
            }, 15 );

            win.addEventListener('load', function() {
                setTimeout(function() {
                    // at load, if user hasn't scrolled more than 20 or so...
                    if (MBP.getScrollTop() < 20) {
                        // reset to hide addr bar at onload
                        MBP.hideUrlBar();
                    }
                }, 0);
            });
        }
    };

    /**
     * Fast Buttons - read wiki below before using
     * https://github.com/h5bp/mobile-boilerplate/wiki/JavaScript-Helper
     */

    MBP.fastButton = function(element, handler, pressedClass) {
        this.handler = handler;
        // styling of .pressed is defined in the project's CSS files
        this.pressedClass = typeof pressedClass === 'undefined' ? 'pressed' : pressedClass;

        if (element.length && element.length > 1) {
            for (var singleElIdx in element) {
                this.addClickEvent(element[singleElIdx]);
            }
        } else {
            this.addClickEvent(element);
        }
    };

    MBP.fastButton.prototype.handleEvent = function(event) {
        event = event || window.event;

        switch (event.type) {
            case 'touchstart': this.onTouchStart(event); break;
            case 'touchmove': this.onTouchMove(event); break;
            case 'touchend': this.onClick(event); break;
            case 'click': this.onClick(event); break;
        }
    };

    MBP.fastButton.prototype.onTouchStart = function(event) {
        var element = event.srcElement;
        event.stopPropagation();
        element.addEventListener('touchend', this, false);
        document.body.addEventListener('touchmove', this, false);
        this.startX = event.touches[0].clientX;
        this.startY = event.touches[0].clientY;

        element.className+= ' ' + this.pressedClass;
    };

    MBP.fastButton.prototype.onTouchMove = function(event) {
        if (Math.abs(event.touches[0].clientX - this.startX) > 10 ||
            Math.abs(event.touches[0].clientY - this.startY) > 10) {
            this.reset(event);
        }
    };

    MBP.fastButton.prototype.onClick = function(event) {
        event = event || window.event;
        var element = event.srcElement;
        if (event.stopPropagation) {
            event.stopPropagation();
        }
        this.reset(event);
        this.handler.apply(event.currentTarget, [event]);
        if (event.type == 'touchend') {
            MBP.preventGhostClick(this.startX, this.startY);
        }
        var pattern = new RegExp(' ?' + this.pressedClass, 'gi');
        element.className = element.className.replace(pattern, '');
    };

    MBP.fastButton.prototype.reset = function(event) {
        var element = event.srcElement;
        rmEvt(element, 'touchend', this, false);
        rmEvt(document.body, 'touchmove', this, false);

        var pattern = new RegExp(' ?' + this.pressedClass, 'gi');
        element.className = element.className.replace(pattern, '');
    };

    MBP.fastButton.prototype.addClickEvent = function(element) {
        addEvt(element, 'touchstart', this, false);
        addEvt(element, 'click', this, false);
    };

    MBP.preventGhostClick = function(x, y) {
        MBP.coords.push(x, y);
        window.setTimeout(function() {
            MBP.coords.splice(0, 2);
        }, 2500);
    };

    MBP.ghostClickHandler = function(event) {
        if (!MBP.hadTouchEvent && MBP.dodgyAndroid) {
            // This is a bit of fun for Android 2.3...
            // If you change window.location via fastButton, a click event will fire
            // on the new page, as if the events are continuing from the previous page.
            // We pick that event up here, but MBP.coords is empty, because it's a new page,
            // so we don't prevent it. Here's we're assuming that click events on touch devices
            // that occur without a preceding touchStart are to be ignored.
            event.stopPropagation();
            event.preventDefault();
            return;
        }
        for (var i = 0, len = MBP.coords.length; i < len; i += 2) {
            var x = MBP.coords[i];
            var y = MBP.coords[i + 1];
            if (Math.abs(event.clientX - x) < 25 && Math.abs(event.clientY - y) < 25) {
                event.stopPropagation();
                event.preventDefault();
            }
        }
    };

    // This bug only affects touch Android 2.3 devices, but a simple ontouchstart test creates a false positive on
    // some Blackberry devices. https://github.com/Modernizr/Modernizr/issues/372
    // The browser sniffing is to avoid the Blackberry case. Bah
    MBP.dodgyAndroid = ('ontouchstart' in window) && (navigator.userAgent.indexOf('Android 2.3') != -1);

    if (document.addEventListener) {
        document.addEventListener('click', MBP.ghostClickHandler, true);
    }

    addEvt(document.documentElement, 'touchstart', function() {
        MBP.hadTouchEvent = true;
    }, false);

    MBP.coords = [];

    // fn arg can be an object or a function, thanks to handleEvent
    // read more about the explanation at: http://www.thecssninja.com/javascript/handleevent
    function addEvt(el, evt, fn, bubble) {
        if ('addEventListener' in el) {
            // BBOS6 doesn't support handleEvent, catch and polyfill
            try {
                el.addEventListener(evt, fn, bubble);
            } catch(e) {
                if (typeof fn == 'object' && fn.handleEvent) {
                    el.addEventListener(evt, function(e){
                        // Bind fn as this and set first arg as event object
                        fn.handleEvent.call(fn,e);
                    }, bubble);
                } else {
                    throw e;
                }
            }
        } else if ('attachEvent' in el) {
            // check if the callback is an object and contains handleEvent
            if (typeof fn == 'object' && fn.handleEvent) {
                el.attachEvent('on' + evt, function(){
                    // Bind fn as this
                    fn.handleEvent.call(fn);
                });
            } else {
                el.attachEvent('on' + evt, fn);
            }
        }
    }

    function rmEvt(el, evt, fn, bubble) {
        if ('removeEventListener' in el) {
            // BBOS6 doesn't support handleEvent, catch and polyfill
            try {
                el.removeEventListener(evt, fn, bubble);
            } catch(e) {
                if (typeof fn == 'object' && fn.handleEvent) {
                    el.removeEventListener(evt, function(e){
                        // Bind fn as this and set first arg as event object
                        fn.handleEvent.call(fn,e);
                    }, bubble);
                } else {
                    throw e;
                }
            }
        } else if ('detachEvent' in el) {
            // check if the callback is an object and contains handleEvent
            if (typeof fn == 'object' && fn.handleEvent) {
                el.detachEvent("on" + evt, function() {
                    // Bind fn as this
                    fn.handleEvent.call(fn);
                });
            } else {
                el.detachEvent('on' + evt, fn);
            }
        }
    }

    /**
     * Autogrow
     * http://googlecode.blogspot.com/2009/07/gmail-for-mobile-html5-series.html
     */

    MBP.autogrow = function(element, lh) {
        function handler(e) {
            var newHeight = this.scrollHeight;
            var currentHeight = this.clientHeight;
            if (newHeight > currentHeight) {
                this.style.height = newHeight + 3 * textLineHeight + 'px';
            }
        }

        var setLineHeight = (lh) ? lh : 12;
        var textLineHeight = element.currentStyle ? element.currentStyle.lineHeight : getComputedStyle(element, null).lineHeight;

        textLineHeight = (textLineHeight.indexOf('px') == -1) ? setLineHeight : parseInt(textLineHeight, 10);

        element.style.overflow = 'hidden';
        element.addEventListener ? element.addEventListener('keyup', handler, false) : element.attachEvent('onkeyup', handler);
    };

    /**
     * Enable CSS active pseudo styles in Mobile Safari
     * http://alxgbsn.co.uk/2011/10/17/enable-css-active-pseudo-styles-in-mobile-safari/
     */

    MBP.enableActive = function() {
        document.addEventListener('touchstart', function() {}, false);
    };

    /**
     * Prevent default scrolling on document window
     */

    MBP.preventScrolling = function() {
        document.addEventListener('touchmove', function(e) {
            e.preventDefault();
        }, false);
    };

    /**
     * Prevent iOS from zooming onfocus
     * https://github.com/h5bp/mobile-boilerplate/pull/108
     * Adapted from original jQuery code here: http://nerd.vasilis.nl/prevent-ios-from-zooming-onfocus/
     */

    MBP.preventZoom = function() {
        var formFields = document.querySelectorAll('input, select, textarea');
        var contentString = 'width=device-width,initial-scale=1,maximum-scale=';
        var i = 0;

        for (i = 0; i < formFields.length; i++) {
            formFields[i].onfocus = function() {
                MBP.viewportmeta.content = contentString + '1';
            };
            formFields[i].onblur = function() {
                MBP.viewportmeta.content = contentString + '10';
            };
        }
    };
})(document);/* END OF helper.js */

/* BEGINNING OF index.js */
/*globals alert Modernizr*/
(function($){
    "use strict";
    if(window.location.pathname.toString() !== "/" && window.location.pathname.toString().indexOf("index.html") === -1) return;
    var $carousel,
        $carousel_items,
        $navbar_bottom,
        $navbar_top,
        hammer_defaults = {
            prevent_default: true,
            scale_treshold: 0,
            drag_min_distance: 0
        },
        drag_distanceX_threshold = 10,
        drag_distanceX,
        drag_carousel = function(event){
            drag_distanceX = event.distanceX;
        },
        slideout_navigation_animation_delay_milliseconds = 200,
        slideout_navigation_animation_timer,
        dragend_carousel = function(event){
            if(drag_distanceX === undefined) return;
            if(Math.abs(drag_distanceX) < drag_distanceX_threshold) return;
            if(drag_distanceX > 0) {
                $carousel.carousel('prev');
            } else {
                $carousel.carousel('next');
            }
            drag_distanceX = undefined;
        },
        adjust_carousel_height = function(event){
            var $window = $(window),
                height = $window.height() - $navbar_top.height() - $navbar_bottom.height() + 2,
                width = $window.width() + 1;
            if(height > 0) {
                $carousel.height(height);
                $carousel_items.height(height);
            }
        },
        index_init = function(event){
            $carousel = $('#carousel').carousel();
            $carousel_items = $carousel.find(".item");
            $navbar_bottom = $(".navbar-fixed-bottom");
            $navbar_top = $(".navbar-fixed-top");
            $(window).bind("resize orientationchange", adjust_carousel_height);
            $("#show_slideout_navigation").change(function(){
                if(slideout_navigation_animation_timer){
                    clearTimeout(slideout_navigation_animation_timer);
                }
                slideout_navigation_animation_timer = setTimeout(adjust_carousel_height, slideout_navigation_animation_delay_milliseconds);
            });
            adjust_carousel_height();
            if(!Modernizr.touch) {
                $carousel.find(".carousel-control").show();
            }
            $carousel_items.hammer(hammer_defaults).bind('drag', drag_carousel);
            $carousel_items.hammer(hammer_defaults).bind('dragend', dragend_carousel);
        };


    if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
        document.addEventListener("deviceready", index_init, false);
    } else {
        $(document).ready(index_init);
    }
}(jQuery));

/* END OF index.js */

/* BEGINNING OF map--zoom.js */
/*globals window map_details */
/* ===========================================================
 * map.js v1
 * Developed at Department of Conservation by Matthew Holloway
 * <matth@catalyst.net.nz>
 * -----------------------------------------------------------
 *
 * Provides maps with pinchzoom, drag scrolling etc with popups.
 *
 * ========================================================== */
(function($){
    "use strict";
    if(window.location.pathname.toString().indexOf("map-") === -1) return;
    var drag_offset = {base_x:0,base_y:0,x:0,y:0},
        map__zoom_init = function(event){
            //based on code from http://eightmedia.github.com/hammer.js/zoom/index2.html
            var $window = $(window),
                window_width = $window.width(),
                window_height = $window.height(),
                $image = $("#map"),
                $youarehere_offmap = $("#youarehere").find(".offmap"),
                hammer,
                height,
                offset,
                screenOffset,
                origin,
                prevScale,
                scale = map_details.map_initial_scale,
                translate,
                width,
                screenOrigin,
                $locations = $(".location"),
                redraw = function(){
                    var map_css,
                        icon_scale;
                    if(scale < 0.1) {
                        scale = 0.1;
                    } else if(scale > 3) {
                        scale = 3;
                    }
                    map_css = 'translate3d(' + drag_offset.x + 'px, ' + drag_offset.y + 'px, 0) scale3d(' + scale + ', ' + scale + ', 1)';
                    $image.css('-webkit-transform', map_css);
                    // Want to scale icons independently of the map? Enable this.
                    // icon_scale = (1 / scale) * 30;
                    // if(icon_scale > 50) {
                    //    icon_scale = 50;
                    // }
                    //$locations.width(icon_scale).height(icon_scale);
                    //$youarehere_offmap.css("fontSize", (icon_scale / 2) + "px");
                    window.hide_all_popovers();
                },
                no_touch_zoom_init = function(){
                    var $no_touch_zoom = $("#no-touch-zoom"),
                        $zoom_out = $no_touch_zoom.find("a.zoom-out"),
                        $zoom_in = $no_touch_zoom.find("a.zoom-in");
                    $zoom_out.click(function(event){
                        scale -= 0.1;
                        redraw();
                    });
                    $zoom_in.click(function(event){
                        scale += 0.1;
                        redraw();
                    });
                    $("#no-touch-zoom").show();
                };

            if(window.Modernizr && !window.Modernizr.touch) {
                no_touch_zoom_init();
            }

            offset = $image.offset();

            $image.css({
                "left": ((-map_details.map_pixel_width / 2) + (window_width / 2)) + "px",
                "top": ((-map_details.map_pixel_height / 2) + ($window.height() / 2) - $("#logo").height() ) + "px"
            });

            scale = (window_width - 50) / map_details.map_pixel_width; //ensure that the map is sized for the device width...
            if(scale * map_details.map_pixel_height > window_height) { //..unless that's still too high, in which case scale for height
                scale = (window_height - 50) / map_details.map_pixel_height;
            }

            redraw();

            $image.show();

            width = $image.width();
            height = $image.height();
            
            screenOrigin = {
                x: 0,
                y: 0
            };
            origin = {
                x: 0,
                y: 0
            };
            translate = {
                x: 0,
                y: 0
            };
            screenOffset = {
                x: 0,
                y: 0
            };

            prevScale = scale;

            hammer = $image.hammer({
                prevent_default: true,
                scale_treshold: 0,
                drag_min_distance: 0
            });

            hammer.bind('dragend', function(event) {
                drag_offset.base_x = drag_offset.x;
                drag_offset.base_y = drag_offset.y;
                redraw();
            });

            hammer.bind('drag', function(event) {
                drag_offset.x = drag_offset.base_x + event.distanceX;
                drag_offset.y = drag_offset.base_y + event.distanceY;
                //$image.css('-webkit-transform', 'translate3d(' + drag_offset.x + 'px, ' + drag_offset.y + 'px, 0) scale3d(' + scale + ', ' + scale + ', 1)');
                redraw();
            });

            hammer.bind('transformstart', function(event) {
                screenOrigin.x = (event.originalEvent.touches[0].clientX + event.originalEvent.touches[1].clientX) / 2;
                return screenOrigin.y = (event.originalEvent.touches[0].clientY + event.originalEvent.touches[1].clientY) / 2;
            });

            hammer.bind('transform', function(event) {
                var newHeight, newWidth;
                scale = prevScale * event.scale;

               

                newWidth = $image.width() * scale;
                newHeight = $image.height() * scale;

                origin.x = screenOrigin.x - offset.left - translate.x;
                origin.y = screenOrigin.y - offset.top - translate.y;

                translate.x += -origin.x * (newWidth - width) / newWidth;
                translate.y += -origin.y * (newHeight - height) / newHeight;

                //$image.css('-webkit-transform', "translate3d(" + drag_offset.x + "px, " + drag_offset.y + "px, 0) scale3d(" + scale + ", " + scale + ", 1)");
                redraw();
                width = newWidth;

                return height = newHeight;/*IGNORE JSLINT*/ /*UNFORTUNATELY JSLINT DOESN'T CURRENTLY ALLOW IGNORE ON LINES OF CODE (I THINK)*/
            });

            hammer.bind('transformend', function(event) {
                return prevScale = scale;/*IGNORE JSLINT*/ /*UNFORTUNATELY JSLINT DOESN'T CURRENTLY ALLOW IGNORE ON LINES OF CODE (I THINK)*/
            });
        };

    if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
        document.addEventListener("deviceready", map__zoom_init, false);
    } else {
        $(document).ready(map__zoom_init);
    }
}(jQuery));/* END OF map--zoom.js */

/* BEGINNING OF map.js */
/*globals map_details difference_between_positions_in_kilometers format_distance geolocation position_expires_after_milliseconds Modernizr Camera alert*/
/* ===========================================================
 * map.js v1
 * Developed at Department of Conservation by Matthew Holloway
 * <matth@catalyst.net.nz>
 * -----------------------------------------------------------
 *
 * Provides maps with pinchzoom, drag scrolling etc with popups.
 *
 * ========================================================== */
(function($){
    "use strict";
    if(window.location.pathname.toString().indexOf("map-") === -1) return;
    (function(){
        var PIx = 3.141592653589793,
            degrees_to_radians = function(degrees) {
                return degrees * PIx / 180;
            },
            kilometres_to_miles = 0.621371,
            one_hour_in_milliseconds = 60 * 60 * 1000;

        window.format_distance = function(kilometres){
             return (Math.round(kilometres * 100) / 100) + "km / " + (Math.round(kilometres * kilometres_to_miles * 100) / 100) + "mi";
        };

        window.difference_between_positions_in_kilometers = function(lat1, lon1, lat2, lon2, lat3, lon3){
            if(lat3 !== undefined && lon3 !== undefined) {
                //normally lat3/lon3 aren't given and this function just figures out the distance
                // between two points.
                // however if lat3/lon3 are given then this function finds out the distance between
                // a point and the closest side of a square (e.g. a map graphic).
                if(lat1 < lat3) {
                    lat2 = lat3;
                }
                if(lon1 > lon3) {
                    lon2 = lon3;
                }
            }
            // courtesy of http://stackoverflow.com/questions/27928/how-do-i-calculate-distance-between-two-latitude-longitude-points/27943#27943
            var R = 6371; // adverage radius of the earth in km
            var dLat = degrees_to_radians(lat2-lat1);  // Javascript functions in radians
            var dLon = degrees_to_radians(lon2-lon1);
            var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                    Math.cos(degrees_to_radians(lat1)) * Math.cos(degrees_to_radians(lat2)) *
                    Math.sin(dLon/2) * Math.sin(dLon/2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c; // Distance in km
        };

        window.position_expires_after_milliseconds = one_hour_in_milliseconds;
    }());

    var map_start = function(){
        if(window.map_details === undefined) { //are we on a map page? If not, there's nothing to do so just return
            return;
        }
        var open_tooltip,
            hammer_defaults = {
                prevent_default: true,
                scale_treshold: 0,
                drag_min_distance: 0
            },
            last_known_position = localStorage["geolocation-last-known-position"],
            one_second_in_milliseconds = 1000,
            geolocationWatchId,
            geolocationSettings = {
                maximumAge:600000,
                enableHighAccuracy: true,
                timeout: one_second_in_milliseconds * 15
            },
            pixels_to_longitude_latitude = function(map_x, map_y){
                return {
                    longitude: map_details.longitude + (map_x / map_details.degrees_per_pixel),
                    latitude: map_details.latitude + (map_y / map_details.degrees_per_pixel)
                };
            },
            longitude_latitude_to_pixels = function(longitude, latitude){
                return {
                    left: Math.abs((longitude - map_details.longitude) / map_details.degrees_per_pixel) + "px",
                    top: Math.abs((latitude - map_details.latitude) / map_details.degrees_per_pixel) + "px"
                };
            },
            geolocationSuccess = function(position){
                /*
                Latitude:          position.coords.latitude
                Longitude:         position.coords.longitude
                Altitude:          position.coords.altitude
                Accuracy:          position.coords.accuracy
                Altitude Accuracy: position.coords.altitudeAccuracy
                Heading:           position.coords.heading
                Speed:             position.coords.speed
                */
                var youarehere_pixels = {
                        "top": -parseInt((position.coords.latitude - window.map_details.latitude) / window.map_details.degrees_per_pixel, 10),
                        "left": parseInt((position.coords.longitude - window.map_details.longitude) / window.map_details.degrees_per_pixel, 10)
                    },
                    edge_buffer_pixels = 10,
                    $youarehere = $("#youarehere").data("latitude", position.coords.latitude).data("longitude", position.coords.longitude),
                    $youarehere_offmap = $youarehere.find(".offmap"),
                    youarehere_css = {position: "absolute"},
                    youarehere_offmap_css = {position: "absolute", left: $youarehere.width() - 15, top: $youarehere.height()},
                    offmap = false,
                    difference_distance_in_kilometres = Math.round(
                            difference_between_positions_in_kilometers(
                                position.coords.latitude, position.coords.longitude,
                                window.map_details.latitude, window.map_details.longitude,
                                window.map_details.extent_latitude, window.map_details.extent_longitude
                            ) * 100) / 100;
                
                $youarehere_offmap.html("you are off the map by about " + format_distance(difference_distance_in_kilometres));
                if(youarehere_pixels.left < 0) {
                    youarehere_pixels.left = edge_buffer_pixels;
                    youarehere_offmap_css.left = edge_buffer_pixels;
                    offmap = true;
                } else if(youarehere_pixels.left > window.map_details.map_pixel_width){
                    youarehere_pixels.left = window.map_details.map_pixel_width - edge_buffer_pixels;
                    youarehere_offmap_css.left -= $youarehere_offmap.width() + edge_buffer_pixels;
                    offmap = true;
                }
                if(youarehere_pixels.top < 0) {
                    youarehere_pixels.top = edge_buffer_pixels;
                    youarehere_offmap_css.top = edge_buffer_pixels;
                    offmap = true;
                } else if(youarehere_pixels.top > window.map_details.map_pixel_height){
                    youarehere_pixels.top = window.map_details.map_pixel_height - edge_buffer_pixels;
                    youarehere_offmap_css.top = -$youarehere_offmap.height() - edge_buffer_pixels;
                    offmap = true;
                }
                youarehere_css.left = youarehere_pixels.left + "px";
                youarehere_css.top = youarehere_pixels.top + "px";
                youarehere_offmap_css.left += "px";
                youarehere_offmap_css.top += "px";
                if(!offmap){
                    if(geolocationSettings.enableHighAccuracy === true) {
                        $youarehere.removeClass("badAccuracy").addClass("goodAccuracy");
                    } else {
                        $youarehere.removeClass("goodAccuracy").addClass("badAccuracy");
                    }
                    $youarehere_offmap.hide();
                } else {
                    $youarehere.removeClass("badAccuracy goodAccuracy");
                    $youarehere_offmap.css(youarehere_offmap_css).show();
                }
                $youarehere.css(youarehere_css).show();
                last_known_position = position;
                localStorage["geolocation-last-known-position"] = JSON.stringify(position);
            },
            geolocationError = function(msg) {
                try{
                    geolocation.clearWatch(geolocationWatchId);
                } catch(exception){
                }
                if(geolocationSettings.enableHighAccuracy === true) { //high accuracy failed so retry with low accuracy
                    geolocationSettings.enableHighAccuracy = false;
                    geolocationWatchId = navigator.geolocation.watchPosition(geolocationSuccess, geolocationError, geolocationSettings);
                } else {
                    $("#no_gps").attr("title", msg.message).show();
                }
            },

            current_time_in_epoch_milliseconds,
            user_actions = {
                $user_actions_panel: $("#user_actions"),
                $photo_preview: $("#photo-preview"),
                initialize_user_photos: function(){
                    var user_photos_string = localStorage["user-photos"],
                        user_photos,
                        user_map_photos,
                        user_map_photo,
                        i;
                    if(user_photos_string === undefined) return;
                    user_photos = JSON.parse(user_photos_string);
                    if(user_photos[map_details.map_id] === undefined) return;
                    user_map_photos = user_photos[map_details.map_id];
                    for(i = 0; i < user_map_photos.length; i++){
                        user_map_photo = user_map_photos[i];
                        user_actions.add_photo_to_map(user_map_photo.imageURI, user_map_photo.latitude, user_map_photo.longitude);
                    }
                },
                panel_toggle: function(event){
                    var user_is_off_map = $("#youarehere").find(".offmap").is(":visible"),
                        error_html;
                    if(navigator.camera && !user_is_off_map) {
                        if(user_actions.$user_actions_panel.hasClass("hidden")){
                            user_actions.$user_actions_panel.removeClass("hidden");
                        } else {
                            user_actions.$user_actions_panel.addClass("hidden");
                        }
                    } else {
                        if(navigator.camera && user_is_off_map) {
                            error_html = "You're off the map so we can't take location photos<br>Use your regular camera app";
                        } else if(!navigator.camera && user_is_off_map) {
                            error_html = "No camera available<br>(and you're off the map anyway so we can't take location photos)";
                        } else if(!navigator.camera && !user_is_off_map) {
                            error_html = "No camera available";
                        }
                        user_actions.$camera_error.html(error_html).fadeIn(function(){
                            if(user_actions.camera_error_timer) {
                                clearTimeout(user_actions.camera_error_timer);
                            }
                            user_actions.camera_error_timer = setTimeout(user_actions.camera_error_hide, 2000);
                        });
                    }
                },
                data_photo_uri_key: "content-image-uri",
                show_user_photo: function(event){
                    var $photo = user_actions.$photo_preview,
                        $this = $(this);
                    $photo.attr("src", $this.data(user_actions.data_photo_uri_key)).show();
                },
                hide_user_photo: function(event){
                    var $photo = user_actions.$photo_preview;
                    $photo.hide();
                },
                add_photo_to_map: function(imageURI, latitude, longitude, display_immediately, add_to_localStorage){
                    var user_photo_data = {
                        "longitude": longitude,
                        "latitude": latitude
                        },
                        user_photo_style,
                        user_photos,
                        user_photo;
                    if(latitude !== undefined && longitude !== undefined) {
                        user_photo_style = longitude_latitude_to_pixels(longitude, latitude);
                        user_photo_style.position = "absolute";
                    }
                    user_photo_data[user_actions.data_photo_uri_key] = imageURI;
                    var $photo_icon = $("<a/>").addClass("location location-icon location-user-photo").data(user_photo_data);
                    if(user_photo_style){
                        $photo_icon.css(user_photo_style);
                    }
                    $("#map").append($photo_icon);
                    if(Modernizr.touch) {
                        $photo_icon.hammer(hammer_defaults).bind('tap', user_actions.show_user_photo);
                    } else {
                        $photo_icon.click(user_actions.show_user_photo);
                    }
                    if(display_immediately === true) {
                        user_actions.show_user_photo.call($photo_icon); //I could unwrap it with .get(0) but it'll still work in show_user_photo
                    }
                    if(add_to_localStorage === true) {
                        user_photos = localStorage["user-photos"];
                        if(user_photos === undefined) {
                            user_photos = {};
                        }
                        if(user_photos[map_details.map_id] === undefined){
                            user_photos[map_details.map_id] = [];
                        }
                        user_photo = {
                            "imageURI": imageURI,
                            "latitude": latitude,
                            "longitude": longitude
                        };
                        user_photos[map_details.map_id].push(user_photo);
                        localStorage["user-photos"] = JSON.stringify(user_photos);
                    }
                },
                take_photo: function(){
                    var camera_success = function(imageURI) {
                            var $photo_preview = $("#photo-preview");
                            $photo_preview.attr("src", imageURI);
                            last_known_position = localStorage["geolocation-last-known-position"];
                            if(last_known_position !== undefined) {
                                last_known_position = JSON.parse(last_known_position);
                                user_actions.add_photo_to_map(imageURI, last_known_position.coords.latitude, last_known_position.coords.longitude, true, true);
                            } else {
                                user_actions.add_photo_to_map(imageURI, undefined, undefined, true, true);
                            }
                            user_actions.$user_actions_panel.addClass("hidden");
                        },
                        camera_fail = function onFail(message) {
                            alert('Failed because: ' + message);
                        };
                    navigator.camera.getPicture(camera_success, camera_fail, {quality: 50, destinationType: Camera.DestinationType.FILE_URI});
                    return false;
                },
                camera_error_timer:undefined,
                $camera_error: $("#camera_error"),
                camera_error_hide: function(){
                    user_actions.$camera_error.fadeOut();
                }
            },
            youarehere_hammer,
            toggle_map_key = function(event){
                var $map_key = $("#map-key");
                $map_key.toggle();
                return false;
            };

        if(last_known_position !== undefined) {
            last_known_position = JSON.parse(last_known_position);
            current_time_in_epoch_milliseconds = (new Date()).getTime();
            geolocationSuccess(last_known_position);
        }

        if (navigator.geolocation) {
            geolocationWatchId = navigator.geolocation.watchPosition(geolocationSuccess, geolocationError, geolocationSettings);
        } else {
            geolocationError();
        }
        
        
        if(Modernizr.touch) {
            $("#weta").hammer(hammer_defaults).bind('touchstart', window.toggle_popover);
            $("#map .location").hammer(hammer_defaults).bind('touchstart', window.toggle_popover);
            $("#take-photo").hammer(hammer_defaults).bind('touchstart', user_actions.take_photo);
            $("#photo-preview").hammer(hammer_defaults).bind('touchstart', user_actions.hide_user_photo);
            $("#toggle-map-key, #map-key").hammer(hammer_defaults).bind('touchstart', toggle_map_key);
            //touch devices
        } else {
            $("#weta").click(window.toggle_popover);
            $("#map .location").click(window.toggle_popover);
            //anything for desktop browsers
            $("#take-photo").click(user_actions.take_photo);
            $("#photo-preview").click(user_actions.hide_user_photo);
            $("#toggle-map-key, #map-key").click(toggle_map_key);
        }
        youarehere_hammer = $("#youarehere, #no_gps").hammer(hammer_defaults);
        youarehere_hammer.bind("tap", user_actions.panel_toggle);
        user_actions.initialize_user_photos();
        user_actions.$camera_error.click(user_actions.camera_error_hide);

    };

    if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
        document.addEventListener("deviceready", map_start, false);
    } else {
        $(document).ready(map_start);
    }
}(jQuery));/* END OF map.js */

/* BEGINNING OF maps.js */
/*global alert nz_map_dimensions console*/
(function($){
    "use strict";
    if(window.location.pathname.toString().indexOf("maps.html") === -1) return;
    var $wrapper,
        $new_zealand_map_wrapper,
        $new_zealand_map_img,
        text_sizes = ["size800", "size700", "size600", "size500", "size400", "size300", "size200", "size100"],
        $window,

        adjust_maps_height = function(event){
            var available_width = $window.width(),
                available_height = $window.height(),
                offset = $new_zealand_map_img.offset(),
                remaining_height = available_height - offset.top,
                fixed_dimension = (available_width / remaining_height < nz_map_dimensions.ratio) ? "width" : "height",
                target_dimensions = {width:undefined, height:undefined};

            if(fixed_dimension === "width") {
                target_dimensions.width = available_width;
                target_dimensions.height = target_dimensions.width / nz_map_dimensions.ratio;
            } else {
                target_dimensions.height = remaining_height - 10;
                target_dimensions.width = target_dimensions.height * nz_map_dimensions.ratio;
            }
            if(target_dimensions.width > nz_map_dimensions.width) {
                target_dimensions.width = nz_map_dimensions.width;
                nz_map_dimensions.height = nz_map_dimensions.height;
            }
            $new_zealand_map_wrapper.width(target_dimensions.width).height(target_dimensions.height);
            $new_zealand_map_img.width(target_dimensions.width).height(target_dimensions.height);
            console.log(fixed_dimension);
            target_dimensions.chosen_text_size = Math.round(target_dimensions.width / 100) * 100;
            if(target_dimensions.chosen_text_size > 800) {
                target_dimensions.chosen_text_size = 800;
            } else if(target_dimensions.chosen_text_size < 100) {
                target_dimensions.chosen_text_size = 100;
            }
            $new_zealand_map_wrapper
                .addClass("size" + target_dimensions.chosen_text_size)
                .removeClass(text_sizes.join(" ").replace("size" + target_dimensions.chosen_text_size, ""));
            $wrapper.width(available_width).height(remaining_height);
            //$("#debug").text("size" + target_dimensions.chosen_text_size);
            $new_zealand_map_wrapper.show();
        },
        maps_init = function(event){
            $window = $(window);
            $wrapper = $("#wrapper");
            $new_zealand_map_wrapper = $wrapper.find("#new-zealand-map");
            $new_zealand_map_img = $new_zealand_map_wrapper.find("img");
            
            $window.bind("resize orientationchange", adjust_maps_height);
            adjust_maps_height();
            setTimeout(adjust_maps_height, 200);
        };

    if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
        document.addEventListener("deviceready", maps_init, false);
    } else {
        $(document).ready(maps_init);
    }
}(jQuery));

/* END OF maps.js */

/* BEGINNING OF modal.js */
/*global navigator document*/
(function($){
    "use strict";
    var modal_init = function(event){
        /*
        Making changes to Bootstrap Modals?
        Keep this in mind http://stackoverflow.com/questions/10636667/bootstrap-modal-appearing-under-background/11788713#11788713
        AND also be aware that on the Samsung Galaxy Note tablet (GT-N8000) it also occurs with position:absolute;
        */
        $(".modal").appendTo("body");

    };
    if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
        document.addEventListener("deviceready", modal_init, false);
    } else {
        $(document).ready(modal_init);
    }
}(jQuery));/* END OF modal.js */

/* BEGINNING OF navbar.js */
/*
 * Handles the navbars (including the bottom one, if it's there)
 */
(function($){
	"use strict";
	var navbar_init = function(){
		var $navbar_social = $("#share-social a"),
			navbar_timer,
			hide_social_popout = function(event){
				window.hide_popover.bind($navbar_social)(event);
			};
		$navbar_social.click(function(event){
			if(navbar_timer !== undefined) {
				clearTimeout(navbar_timer);
				navbar_timer = undefined;
			}
			window.toggle_popover.bind($navbar_social)(event);
			return false;
		});
		$(window).scroll(function(){
			if(navbar_timer !== undefined) {
				window.clearTimeout(navbar_timer);
				navbar_timer = undefined;
			}
			navbar_timer = window.setTimeout(hide_social_popout, 100);
		});
		$("#show_slideout_navigation").change(function(event){
			// When on a very small screen AND when the slideout navigation is exposed hide the logo because it will mess up the display
			var $this = $(this),
				$logo;
			if($(window).height() > 400 && $(window).width() > 400) return;
			$logo = $("#logo");
			if($this.is(":checked")) {
				$logo.hide();
			} else {
				$logo.show();
			}
			
			
		});
	};

	if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
        document.addEventListener("deviceready", navbar_init, false);
    } else {
        $(document).ready(navbar_init);
    }
}(jQuery));/* END OF navbar.js */

/* BEGINNING OF online-offline.js */
/*globals Connection */
/*
 * Responsible for making changes to pages based on whether the device is online or offline
 */
(function($){
    "use strict";
    var going_online_offline_init = function(){
            document.addEventListener("online", going_online, false);
            document.addEventListener("offline", going_offline, false);
            if(navigator.network && navigator.network.connection.type === Connection.NONE) {
                going_offline();
            } else { //either we're online or the browser can't tell us if it's online, so assume online
                going_online();
            }
        },
       going_online = function(){
            $("#share-social").show();
            /*
            //Loss of connectivity crashes entire app. Disabling Youtube until we can find a proper fix for this.
            $(".youtube").each(function(){
                var $this = $(this),
                    youtube_id = $this.data("youtube-id");
                $this.html($('<iframe width="560" height="315" frameborder="0" allowfullscreen></iframe>')
                    .attr("src", "http://www.youtube.com/embed/" + youtube_id));
            });
            */
        },
       going_offline = function(){
            $("#share-social").hide();
            $(".youtube").each(function(){
                var $this = $(this);
                $this.empty();
            });
        };

    if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
        document.addEventListener("deviceready", going_online_offline_init, false);
    } else {
        $(document).ready(going_online_offline_init);
    }
}(jQuery));/* END OF online-offline.js */

/* BEGINNING OF popover.js */
/*
 * Wrapper for Bootstrap's PopOver
 * http://twitter.github.com/bootstrap/javascript.html#popovers
 * This wrapper ensures that all other popovers are closed when
 * a new one opens, and that they can be closed by clicking on
 * the body tag and so on.
 * NOTE: there's a popular plugin called BootstrapX that claims
 * to do the same but it was very buggy on touch devices.
 */
(function($){
    "use strict";

    var existing_popovers = [],
        hammer_defaults = {
            prevent_default: true,
            scale_treshold: 0,
            drag_min_distance: 0
        },
        popover_init = function(event){
            var $html = $("html");
            $("body.map, #wrapper,#map").click(function(event){
                if($(event.target).is(this)) { //if we reached this event directly without bubbling...
                    window.hide_all_popovers_no_bubbling(event);
                }
            });
            $("body").on("click", ".popover", function(event){
                window.hide_all_popovers_no_bubbling(event);
                $html.trigger("popover-click");
            });
        },
        get_distance = function(latitude, longitude, include_description){
            var last_known_position = localStorage["geolocation-last-known-position"],
                current_time_in_epoch_milliseconds = (new Date()).getTime(),
                distance_away_in_kilometers,
                description_class = include_description ? "with-description" : "";

            if(last_known_position !== undefined) {
                last_known_position = JSON.parse(last_known_position);
                if(last_known_position.timestamp > current_time_in_epoch_milliseconds - window.position_expires_after_milliseconds) {
                    distance_away_in_kilometers = window.difference_between_positions_in_kilometers(last_known_position.coords.latitude, last_known_position.coords.longitude, latitude, longitude);
                    return '<b class="distance_away ' + description_class + '">Distance: ' + window.format_distance(distance_away_in_kilometers) + '</b>';
                }
            }
            return "";
        },
        get_popover_placement = function($sender){
            //console.log("Determining placement");
            var placement = $sender.data("placement"),
                offset,
                $window,
                window_dimensions,
                scroll_top;
            if(placement !== undefined) return placement;
            //console.log("No default placement...determining it dynamically");
            $window = $(window);
            window_dimensions = {"width": $window.width(), "height": $window.height()};
            scroll_top = $window.scrollTop();
            offset = $sender.offset();
            offset.top -= scroll_top;
            offset.top += $sender.height() / 2;
            offset.left += $sender.width() / 2;
            if(window_dimensions.width > 650) { //use left/right
                //console.log("widescreen " + window_dimensions.width + " " + offset.left);
                if(offset.left > window_dimensions.width / 2) {
                    return "left";
                } else {
                    return "right";
                }
            }
            //console.log("smallscreen" + window_dimensions.width);
            if(offset.top > window_dimensions.height / 2) {
                return "top";
            } else {
                return "bottom";
            }
        };

    window.hide_all_popovers = function(event, except_this_one){
        var $popover;
        while(existing_popovers.length){
            $popover = existing_popovers.pop();
            if(!except_this_one || !$popover.is(except_this_one)) {
                $popover.popover('hide');
            }
        }
    };

    window.hide_all_popovers_no_bubbling = function(event, except_this_one){
        window.hide_all_popovers(event, except_this_one);
        if(!event) return;
        event.preventDefault();
        event.stopPropagation();
        if(event.originalEvent) {
            event.originalEvent.stopPropagation();
        }
    };

    

    window.hide_popover = function(event){
        $(this).popover('hide');
    };

    window.toggle_popover = function(event){
        var $this = $(this),
            content_template = $this.data("content-template"),
            popover_class = $this.data("popover-class"),
            options = {html: true, trigger: "manual", "placement": get_popover_placement($this)},
            distance_placeholder = "[DISTANCE]",
            old_options,
            includes_description = false;
        window.hide_all_popovers(event, $this);
        if(popover_class) {
            options.template = '<div class="popover ' + popover_class + '"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>';
        }
        if(content_template !== undefined) { //if there is a template then there is dynamic content. bootstrap popovers cache content so we need to destroy the content and then rebuild it
            includes_description = (content_template.indexOf(distance_placeholder) + distance_placeholder.length + 5) < content_template.length;
            options.content = content_template.replace(distance_placeholder,
                get_distance($this.data("latitude"), $this.data("longitude"), includes_description));
            old_options = $this.data('popover');
            if(old_options) {
                old_options.options.content = options.content;
                $this.data('popover', old_options);
            }
        }
        $this.popover(options).popover('toggle');
        existing_popovers.push($this);
        if(event.originalEvent) {
            event.originalEvent.stopPropagation();
        }
        return false;
    };

    window.show_popover = function(event, override_content){
        var $this = $(this),
            options = {html: true, trigger: "manual", "placement": get_popover_placement($this)};
        window.hide_all_popovers(event, $this);
        if(override_content !== undefined) {
            options.content = override_content;
        }
        $this.popover(options).popover('show');
        existing_popovers.push($this);
        if(!event) return;
        event.stopPropagation();
        if(event.originalEvent) {
            event.originalEvent.stopPropagation();
        }
    };

    if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
        document.addEventListener("deviceready", popover_init, false);
    } else {
        $(document).ready(popover_init);
    }
}(jQuery));/* END OF popover.js */

/* BEGINNING OF walk.js */
/*global navigator document alert console */
(function($){
    "use strict";
    if(window.location.pathname.toString().indexOf("walk-") === -1) return;
    var walk_init = function(){
        var $dont_miss = $(".dont-miss"),
            $shadow = $dont_miss.find(".shadow"),
            is_shadowed = false,
            $current_dont_miss,
            disable_all_dont_miss = function(event){
                is_shadowed = false;
                if($current_dont_miss !== undefined) {
                    $current_dont_miss.css("z-index", "auto");
                    window.hide_all_popovers.apply($current_dont_miss);
                    $current_dont_miss = undefined;
                }
                $shadow.removeClass("shadow-visible");
            },
            $html = $("html").bind("popover-click", disable_all_dont_miss);

        $(".modal").click(function(){
            $(this).modal("hide");
        });
       
        $('#carousel').carousel();

        $("body").on("click", ".audio", function(event){
            var $this = $(this),
                audio_path,
                media_player;
            if(window.Media) { //use Phonegap-style audio
               var  onSuccess = function(){},
                    onError = function onError(error) {
                        console.log('AUDIO ERROR code: '    + error.code    + '\nmessage: ' + error.message + '\n');
                    };
                audio_path = "/android_asset/www/" + $this.data("audio");
                media_player = new window.Media(audio_path, onSuccess, onError);
                media_player.play();
            } else {// Use HTML5 Audio approach
                var $audio = $("audio"),
                    audio_element;
                audio_path = $this.data("audio");
                if($audio.length === 0) {
                    $audio = $("<audio/>").attr("src", audio_path);
                    $("body").append($audio);
                } else {
                    $audio.attr("src", audio_path);
                }
                audio_element = $audio.get(0);
                audio_element.load();
                audio_element.play();
            }
        });
        $(".walk-detail-header").click(function(){
            $(this).toggleClass("open").next(".walk-detail").slideToggle();
        });
        $(".dont-miss").click();
        $("a.icon").click(window.toggle_popover);

        $dont_miss.find("a").click(function(){
            var $this = $(this);
            if(is_shadowed) {
                disable_all_dont_miss();
            } else {
                $current_dont_miss = $this;
                $current_dont_miss.css("z-index", "3");
                $shadow.addClass("shadow-visible");
                is_shadowed = true;
                window.show_popover.apply($current_dont_miss);
            }
            return false;
        });

        $shadow.click(disable_all_dont_miss);
    };

    if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
        document.addEventListener("deviceready", walk_init, false);
    } else {
        $(document).ready(walk_init);
    }
}(jQuery));/* END OF walk.js */

